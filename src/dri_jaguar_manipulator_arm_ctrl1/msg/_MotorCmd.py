"""autogenerated by genpy from dri_jaguar_manipulator_arm_ctrl1/MotorCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCmd(genpy.Message):
  _md5sum = "24666ab2ba77a982f246655887dca65b"
  _type = "dri_jaguar_manipulator_arm_ctrl1/MotorCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# jaguar arm motor command message from DrRobot Robot.
uint32 motorID		# motor ID number
int32 motorCmd	        # motor Comamnd value
int32 motorCtrl		# motor ctrl method , 0-- PWM, 1-- velocity  2-- position


"""
  __slots__ = ['motorID','motorCmd','motorCtrl']
  _slot_types = ['uint32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorID,motorCmd,motorCtrl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motorID is None:
        self.motorID = 0
      if self.motorCmd is None:
        self.motorCmd = 0
      if self.motorCtrl is None:
        self.motorCtrl = 0
    else:
      self.motorID = 0
      self.motorCmd = 0
      self.motorCtrl = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I2i.pack(_x.motorID, _x.motorCmd, _x.motorCtrl))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.motorID, _x.motorCmd, _x.motorCtrl,) = _struct_I2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I2i.pack(_x.motorID, _x.motorCmd, _x.motorCtrl))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.motorID, _x.motorCmd, _x.motorCtrl,) = _struct_I2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I2i = struct.Struct("<I2i")
