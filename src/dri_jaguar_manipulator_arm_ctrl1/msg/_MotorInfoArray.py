"""autogenerated by genpy from dri_jaguar_manipulator_arm_ctrl1/MotorInfoArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dri_jaguar_manipulator_arm_ctrl1.msg
import std_msgs.msg

class MotorInfoArray(genpy.Message):
  _md5sum = "7349f4639d1b9a53cc04f795b4478f6c"
  _type = "dri_jaguar_manipulator_arm_ctrl1/MotorInfoArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#this message will be used for motor sensor
MotorInfo[] motorInfos

================================================================================
MSG: dri_jaguar_manipulator_arm_ctrl1/MotorInfo
# motor sensor data message from DrRobot Robot.

Header header    	# timestamp in the header is the time the driver
		 	# returned the battery/power reading
uint32 motorID		# motor ID number
int32 encoder_pos	# encoder positon count
int32 encoder_vel	# encoder velocity value
float32 motor_temperature # motor temperature sensor reading
int32 motor_pwm	# output PWM value, only for Jaguar series robot

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['motorInfos']
  _slot_types = ['dri_jaguar_manipulator_arm_ctrl1/MotorInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorInfos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorInfoArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motorInfos is None:
        self.motorInfos = []
    else:
      self.motorInfos = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motorInfos)
      buff.write(_struct_I.pack(length))
      for val1 in self.motorInfos:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_I2ifi.pack(_x.motorID, _x.encoder_pos, _x.encoder_vel, _x.motor_temperature, _x.motor_pwm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motorInfos is None:
        self.motorInfos = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motorInfos = []
      for i in range(0, length):
        val1 = dri_jaguar_manipulator_arm_ctrl1.msg.MotorInfo()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _struct_I.unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.motorID, _x.encoder_pos, _x.encoder_vel, _x.motor_temperature, _x.motor_pwm,) = _struct_I2ifi.unpack(str[start:end])
        self.motorInfos.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motorInfos)
      buff.write(_struct_I.pack(length))
      for val1 in self.motorInfos:
        _v5 = val1.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_I2ifi.pack(_x.motorID, _x.encoder_pos, _x.encoder_vel, _x.motor_temperature, _x.motor_pwm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motorInfos is None:
        self.motorInfos = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motorInfos = []
      for i in range(0, length):
        val1 = dri_jaguar_manipulator_arm_ctrl1.msg.MotorInfo()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _struct_I.unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.motorID, _x.encoder_pos, _x.encoder_vel, _x.motor_temperature, _x.motor_pwm,) = _struct_I2ifi.unpack(str[start:end])
        self.motorInfos.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I2ifi = struct.Struct("<I2ifi")
_struct_2I = struct.Struct("<2I")
